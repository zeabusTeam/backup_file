"PWM lookup for thrust mapper"
import bisect
from read_pwm_force import read_file

#PWM_TABLE = [1100, 1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210, 1220, 1230, 1240, 1250, 1260, 1270, 1280, 1290, 1300, 1310, 1320, 1330, 1340, 1350, 1360, 1370, 1380, 1390, 1400, 1410, 1420, 1430, 1440, 1450, 1460, 1470, 1480, 1490, 1500, 1510, 1520, 1530, 1540, 1550, 1560, 1570, 1580, 1590, 1600, 1610, 1620, 1630, 1640, 1650, 1660, 1670, 1680, 1690, 1700, 1710, 1720, 1730, 1740, 1750, 1760, 1770, 1780, 1790, 1800, 1810, 1820, 1830, 1840, 1850, 1860, 1870, 1880, 1890, 1900]

pwm_force_data = read_file("/home/zeabus/catkin_ws/src/src_code/zeabus_controller/script/pwm_and_force.txt")

PWM_TABLE = pwm_force_data.get_column(0, ',')
FORCE_LOOKUP = pwm_force_data.get_column(1, ',')
print(PWM_TABLE)
print(FORCE_LOOKUP)
#PWM_TABLE = [800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000, 1100, 1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210, 1220, 1230, 1240, 1250, 1260, 1270, 1280, 1290, 1300, 1310, 1320, 1330, 1340, 1350, 1360, 1370, 1380, 1390, 1400, 1410, 1420, 1430, 1440, 1450, 1460, 1470, 1480, 1490, 1500, 1510, 1520, 1530, 1540, 1550, 1560, 1570, 1580, 1590, 1600, 1610, 1620, 1630, 1640, 1650, 1660, 1670, 1680, 1690, 1700, 1710, 1720, 1730, 1740, 1750, 1760, 1770, 1780, 1790, 1800, 1810, 1820, 1830, 1840, 1850, 1860, 1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100]


#FORCE_LOOKUP = [-4.082336184920758, -4.082336184920758, -4.086872114015114, -3.8283241556367993, -3.7330696446553153, -3.6196714172964053, -3.442770182616506, -3.3021563806914576, -3.184222224238191, -3.057216209596212, -2.9075305494824506, -2.816811967595323, -2.707949669330769,  -2.5265125055565134, -2.3632190581596833, -2.2588926889894863, -2.1772459652910707, -1.9912728724224584, -1.8824105741579051, -1.7690123467989949, -1.642006332157016, -1.4923206720432547, -1.3335631537407808, -1.242844571853653, -1.1203744863060303, -1.0251199753245457, -0.9071858188712795,-0.7892516624180131, -0.6939971514365288, -0.6168863568324701, -0.5216318458509857, -0.4354491930582141, -0.35380246935979903, -0.27669167475574025, -0.19050902196296868,19 -0.11339822735890993,-0.054431149132276764,-0.027215574566138382,0,0,0,0,0,0.05896707822663317,0.11339822735890993,0.18597309286861227,0.26308388747267103,0.3492665402654426,0.4173054766807886,0.5216318458509857,0.6350300732098956,0.7166767969083109,0.84368281155029,0.9434732516261307,1.1022307699286047,1.2473805009480092,1.392530231967414,1.528608104798106,1.6782937649118672,1.8052997795538461,1.959521368761964,2.0955992415926556,2.2180693271402783,2.4131142781976034,2.5219765764621567,2.6943418820477003,2.825883825784036,3.0209287768413606,3.193294082426904,3.3520516007293777,3.447306111710862,3.492665402654426,3.778428935598879,3.9417223829957093,4.005225390316699,4.195734412279668,4.377171576053923,4.567680598016892,4.803548910923425,4.898803421904909,5.093848372962235]

#FORCE_LOOKUP = [-1.642006332157016, -1.4923206720432547, -1.3335631537407808, -1.242844571853653, -1.1203744863060303, -1.0251199753245457, -0.9071858188712795,-0.7892516624180131, -0.6939971514365288, -0.6168863568324701, -0.5216318458509857, -0.4354491930582141, -0.35380246935979903, -0.27669167475574025, -0.19050902196296868,19 -0.11339822735890993,-0.054431149132276764,-0.027215574566138382,0,0,0,0,0,0.05896707822663317,0.11339822735890993,0.18597309286861227,0.26308388747267103,0.3492665402654426,0.4173054766807886,0.5216318458509857,0.6350300732098956,0.7166767969083109,0.84368281155029,0.9434732516261307,1.1022307699286047,1.2473805009480092,1.392530231967414,1.528608104798106,1.6782937649118672,1.8052997795538461,1.959521368761964,2.0955992415926556,2.2180693271402783]


def _float_equal(in1, in2, epsilon=0.000001):
    "checking float equality"
    return True if abs(in1-in2) < epsilon else False

def _lookup_pwm(force):
    "look for pwm from force"
    # FORCE_LOOKUP = [1, 2, 3, 4, 5]
    # pwm_table = [2, 3, 8, 10, 11]
    idx = bisect.bisect_left(FORCE_LOOKUP, force)
    if idx == 0:
        out_pwm = PWM_TABLE[0]
    elif idx == len(FORCE_LOOKUP):
        out_pwm = PWM_TABLE[len(PWM_TABLE)-1]
    elif _float_equal(force, FORCE_LOOKUP[idx]):
        out_pwm = PWM_TABLE[idx]
    else:
        out_pwm = PWM_TABLE[idx - 1] + ((PWM_TABLE[idx] - PWM_TABLE[idx - 1]) *
                                        ((force - FORCE_LOOKUP[idx - 1])/
                                         (FORCE_LOOKUP[idx] - FORCE_LOOKUP[idx - 1])))
    return out_pwm

def lookup_pwm_array(forces):
    out = []
    for force in forces:
        out.append(_lookup_pwm(force))
    return out

def main():
    "testing purpose"
    aaaa = [0, 1, 2.5, 3.5, 4.2, 4.7, 10]
    print(lookup_pwm_array(aaaa))
    print(len(PWM_TABLE),len(FORCE_LOOKUP));

if __name__ == "__main__":
    main()
